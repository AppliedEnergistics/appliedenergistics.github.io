{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      a: \"a\",\n      ol: \"ol\",\n      li: \"li\",\n      strong: \"strong\"\n    }, _provideComponents(), props.components), {ItemLink} = _components;\n    if (!ItemLink) _missingMdxReference(\"ItemLink\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h1, {\n        id: \"spatial-containment-structure\",\n        children: \"Spatial Containment Structure\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A Spatial Containment Structure or SCS, is a Multiblock networked structure\\nthat dictates a region of space as the target of the \", _jsx(ItemLink, {\n          id: \"spatial_io_port\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The structure must be an \", _jsx(_components.a, {\n          href: \"/features/me-network/\",\n          children: \"ME network\"\n        }), \" with a number\\nof \", _jsx(ItemLink, {\n          id: \"spatial_pylon\"\n        }), \" which define\\nthe target region.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The rules for a valid SCS are,\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"A minium size of 3x3x3 ( this will capture a single block. )\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"All \", _jsx(ItemLink, {\n            id: \"spatial_pylon\"\n          }), \" must be in the outside bounding box.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"All \", _jsx(ItemLink, {\n            id: \"spatial_pylon\"\n          }), \" must be either connected with cable or via a QNB, and on the same network.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This also means you can only create 1 SCS per Controller.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The Formed Status of the SCS is displayed as the color of the \", _jsx(ItemLink, {\n          id: \"spatial_pylon\"\n        }), \" if it is a red color, that\\nmeans the configuration is invalid, if its a light purple color, it indicates\\nit is valid. The status is only available if the pylons are powered, and\\nconnected.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Most SCS will require \", _jsx(ItemLink, {\n          id: \"energy_cell\"\n        }), \" to power the \", _jsx(ItemLink, {\n          id: \"spatial_io_port\"\n        }), \", however, these blocks\\nare not considered part of the SCS.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Be aware, that you travel to a dimension without a direct way to get back.\\nSetup your spatial IO in a way, that you can get back.\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Spatial Containment Structure"}},"frontMatter":{"title":"Spatial Containment Structure"},"pagePath":"/features/me-network/spatial/spatial-containment-structure.md"},"__N_SSG":true}