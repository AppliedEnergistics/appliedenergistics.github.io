{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      h2: \"h2\",\n      h3: \"h3\",\n      table: \"table\",\n      thead: \"thead\",\n      tr: \"tr\",\n      th: \"th\",\n      tbody: \"tbody\",\n      td: \"td\"\n    }, _provideComponents(), props.components), {ItemGrid, ItemIcon, ItemLink} = _components;\n    if (!ItemGrid) _missingMdxReference(\"ItemGrid\", true);\n    if (!ItemIcon) _missingMdxReference(\"ItemIcon\", true);\n    if (!ItemLink) _missingMdxReference(\"ItemLink\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"Storage Cells, are one of the core mechanics of storage in Applied Energistics\\n2, there are three kinds: one for items, one for fluids, and one for regions of\\nspace.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"item-storage-cells\",\n        children: \"Item Storage Cells\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Item storage cells can hold up to 63 distinct types of items; the\\nnumber of items they can store depends in part on how many types they're\\nholding, and their storage capacity.\"\n      }), \"\\n\", _jsxs(ItemGrid, {\n        children: [_jsx(ItemIcon, {\n          itemId: \"item_storage_cell_1k\"\n        }), _jsx(ItemIcon, {\n          itemId: \"item_storage_cell_4k\"\n        }), _jsx(ItemIcon, {\n          itemId: \"item_storage_cell_16k\"\n        }), _jsx(ItemIcon, {\n          itemId: \"item_storage_cell_64k\"\n        })]\n      }), \"\\n\", _jsx(_components.h3, {\n        id: \"portable-item-storage\",\n        children: \"Portable Item Storage\"\n      }), \"\\n\", _jsxs(ItemGrid, {\n        children: [_jsx(ItemIcon, {\n          itemId: \"portable_item_cell_1k\"\n        }), _jsx(ItemIcon, {\n          itemId: \"portable_item_cell_4k\"\n        }), _jsx(ItemIcon, {\n          itemId: \"portable_item_cell_16k\"\n        }), _jsx(ItemIcon, {\n          itemId: \"portable_item_cell_64k\"\n        })]\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"fluid-storage-cells\",\n        children: \"Fluid Storage Cells\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Fluid storage cells can hold up to 5 distinct types of fluids; the\\nvolume of fluid they can store depends in part on how many types they're\\nholding, and their storage capacity.\"\n      }), \"\\n\", _jsxs(ItemGrid, {\n        children: [_jsx(ItemIcon, {\n          itemId: \"fluid_storage_cell_1k\"\n        }), _jsx(ItemIcon, {\n          itemId: \"fluid_storage_cell_4k\"\n        }), _jsx(ItemIcon, {\n          itemId: \"fluid_storage_cell_16k\"\n        }), _jsx(ItemIcon, {\n          itemId: \"fluid_storage_cell_64k\"\n        })]\n      }), \"\\n\", _jsx(_components.h3, {\n        id: \"portable-fluid-storage\",\n        children: \"Portable Fluid Storage\"\n      }), \"\\n\", _jsxs(ItemGrid, {\n        children: [_jsx(ItemIcon, {\n          itemId: \"portable_fluid_cell_1k\"\n        }), _jsx(ItemIcon, {\n          itemId: \"portable_fluid_cell_4k\"\n        }), _jsx(ItemIcon, {\n          itemId: \"portable_fluid_cell_16k\"\n        }), _jsx(ItemIcon, {\n          itemId: \"portable_fluid_cell_64k\"\n        })]\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"capacity-limits\",\n        children: \"Capacity Limits\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Storage cells have limits of size, and limits\\nof types, plus you need to consider the resource usage of your cells, to\\ndecide what your best options are. Each storage cell can store a fixed amount\\nof data. Each type consumes a number of bytes (which varies with the cell\\nsize), and each item consumes one bit of storage, so eight items consume one\\nbyte, and a full stack of 64 consumes 8 bytes, regardless of how the item\\nwould stack outside an ME network. For instance, 64 identical saddles don't\\ntake up more space than 64 stone.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Gunning straight for top tier storage cells, is not generally the best idea,\\nsince you use more resources, but don't get any extra type storage.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Below is a table comparing the different tiers of storage cells, how much they store, and\\na rough estimate of their cost.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        id: \"storage-cell-contents-vs-cost\",\n        children: \"Storage Cell Contents Vs Cost\"\n      }), \"\\n\", _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Cell\"\n            }), _jsx(_components.th, {\n              children: \"Bytes\"\n            }), _jsx(_components.th, {\n              children: \"Types\"\n            }), _jsx(_components.th, {\n              children: \"Byte/Type\"\n            }), _jsx(_components.th, {\n              children: \"C-Quartz\"\n            }), _jsx(_components.th, {\n              children: \"N-Quartz\"\n            }), _jsx(_components.th, {\n              children: \"Gold\"\n            }), _jsx(_components.th, {\n              children: \"Diamonds\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(ItemLink, {\n                id: \"item_storage_cell_1k\"\n              })\n            }), _jsx(_components.td, {\n              children: \"1,024\"\n            }), _jsx(_components.td, {\n              children: \"63\"\n            }), _jsx(_components.td, {\n              children: \"8\"\n            }), _jsx(_components.td, {\n              children: \"5\"\n            }), _jsx(_components.td, {\n              children: \"5\"\n            }), _jsx(_components.td, {\n              children: \"1\"\n            }), _jsx(_components.td, {\n              children: \"0\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(ItemLink, {\n                id: \"item_storage_cell_4k\"\n              })\n            }), _jsx(_components.td, {\n              children: \"4,096\"\n            }), _jsx(_components.td, {\n              children: \"63\"\n            }), _jsx(_components.td, {\n              children: \"32\"\n            }), _jsx(_components.td, {\n              children: \"17\"\n            }), _jsx(_components.td, {\n              children: \"5\"\n            }), _jsx(_components.td, {\n              children: \"3\"\n            }), _jsx(_components.td, {\n              children: \"0\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(ItemLink, {\n                id: \"item_storage_cell_16k\"\n              })\n            }), _jsx(_components.td, {\n              children: \"16,384\"\n            }), _jsx(_components.td, {\n              children: \"63\"\n            }), _jsx(_components.td, {\n              children: \"128\"\n            }), _jsx(_components.td, {\n              children: \"51\"\n            }), _jsx(_components.td, {\n              children: \"10\"\n            }), _jsx(_components.td, {\n              children: \"9\"\n            }), _jsx(_components.td, {\n              children: \"1\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(ItemLink, {\n                id: \"item_storage_cell_64k\"\n              })\n            }), _jsx(_components.td, {\n              children: \"65,536\"\n            }), _jsx(_components.td, {\n              children: \"63\"\n            }), _jsx(_components.td, {\n              children: \"512\"\n            }), _jsx(_components.td, {\n              children: \"153\"\n            }), _jsx(_components.td, {\n              children: \"20\"\n            }), _jsx(_components.td, {\n              children: \"27\"\n            }), _jsx(_components.td, {\n              children: \"4\"\n            })]\n          })]\n        })]\n      }), \"\\n\", _jsx(_components.h3, {\n        id: \"storage-capacity-with-varying-type-count\",\n        children: \"Storage Capacity with Varying Type Count\"\n      }), \"\\n\", _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"Cell\"\n            }), _jsx(_components.th, {\n              children: \"Stacks of items With 1 Item Type In Cell\"\n            }), _jsx(_components.th, {\n              children: \"Stacks of items With 63 Item Types in Cell\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(ItemLink, {\n                id: \"item_storage_cell_1k\"\n              })\n            }), _jsx(_components.td, {\n              children: \"127\"\n            }), _jsx(_components.td, {\n              children: \"65\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(ItemLink, {\n                id: \"item_storage_cell_4k\"\n              })\n            }), _jsx(_components.td, {\n              children: \"508\"\n            }), _jsx(_components.td, {\n              children: \"260\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(ItemLink, {\n                id: \"item_storage_cell_16k\"\n              })\n            }), _jsx(_components.td, {\n              children: \"2,032\"\n            }), _jsx(_components.td, {\n              children: \"1,040\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: _jsx(ItemLink, {\n                id: \"item_storage_cell_64k\"\n              })\n            }), _jsx(_components.td, {\n              children: \"8,128\"\n            }), _jsx(_components.td, {\n              children: \"4,160\"\n            })]\n          })]\n        })]\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"spatial-storage\",\n        children: \"Spatial Storage\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Storage cells for spatial I/O come in three sizes.\"\n      }), \"\\n\", _jsxs(ItemGrid, {\n        children: [_jsx(ItemIcon, {\n          itemId: \"spatial_storage_cell_2\"\n        }), _jsx(ItemIcon, {\n          itemId: \"spatial_storage_cell_16\"\n        }), _jsx(ItemIcon, {\n          itemId: \"spatial_storage_cell_128\"\n        })]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Storage Cells","sidenav_icon":"ae2:item_storage_cell_64k","item_ids":["ae2:fluid_storage_cell_1k","ae2:fluid_storage_cell_4k","ae2:fluid_storage_cell_16k","ae2:fluid_storage_cell_64k"]}},"frontMatter":{"title":"Storage Cells","sidenav_icon":"ae2:item_storage_cell_64k","item_ids":["ae2:fluid_storage_cell_1k","ae2:fluid_storage_cell_4k","ae2:fluid_storage_cell_16k","ae2:fluid_storage_cell_64k"]},"pagePath":"/features/me-network/storage-cells.md"},"__N_SSG":true}