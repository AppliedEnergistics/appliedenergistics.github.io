{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      img: \"img\",\n      a: \"a\"\n    }, _provideComponents(), props.components), {ItemLink, ItemGrid, ItemIcon, RecipeFor} = _components;\n    if (!ItemGrid) _missingMdxReference(\"ItemGrid\", true);\n    if (!ItemIcon) _missingMdxReference(\"ItemIcon\", true);\n    if (!ItemLink) _missingMdxReference(\"ItemLink\", true);\n    if (!RecipeFor) _missingMdxReference(\"RecipeFor\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [_jsx(_components.img, {\n          src: \"/assets/large/interface.png\",\n          alt: \"A picture of a Interface Block.\",\n          width: \"316\",\n          height: \"319\"\n        }), _jsx(_components.img, {\n          src: \"/assets/large/interface_module.png\",\n          alt: \"A picture\\nof a Interface Part.\",\n          width: \"316\",\n          height: \"414\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(ItemLink, {\n          id: \"interface\"\n        }), \" is the only component which can\\nbe used as a part, or as a Block. Crafting an ME interface in either form by\\nitself produces the other form. The thin form is useful if you want to provide\\nseveral different interfaces in a single block of physical space, but each\\nwill need its own channel. The block form lets multiple other blocks connect\\nto a single ME interface, using only one channel for the interface.\"]\n      }), \"\\n\", _jsxs(ItemGrid, {\n        children: [_jsx(ItemIcon, {\n          itemId: \"interface\"\n        }), _jsx(ItemIcon, {\n          itemId: \"cable_interface\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(ItemLink, {\n          id: \"interface\"\n        }), \" acts as an in\\nbetween when working with pipes, tubes, networks, or machines from other mods.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You can configure certain items to be exported from the \", _jsx(_components.a, {\n          href: \"/features/me-network/\",\n          children: \"ME Network\"\n        }), \" into the \", _jsx(ItemLink, {\n          id: \"interface\"\n        }), \" for use with other mods. Or use\\nother mods to insert into any \", _jsx(ItemLink, {\n          id: \"interface\"\n        }), \". as long as it isn't full of\\nexported materials it will add any added items into the \", _jsx(_components.a, {\n          href: \"/features/me-network/\",\n          children: \"ME Network\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The interface normally functions like a chest, however with one exception, if\\nyou place a storage bus on an interface, you essentially include the entire\\nnetwork instead, this allows networks to share huge sets of contents and to be\\nchained together in a very effective manner. In addition to this mode, if you\\nyou configure your interface to explicilty provide specific materials, the\\nstorage bus will behave as if the interface was a standard chest, disabling\\nthis advanced feature. (As of this writing, autocrafting in another network\\nwon't reliably use the items in a configured interface.)\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(ItemLink, {\n          id: \"interface\"\n        }), \" require a\\n\", _jsx(_components.a, {\n          href: \"/features/me-network/channels/\",\n          children: \"channel\"\n        }), \" to function.\"]\n      }), \"\\n\", _jsx(RecipeFor, {\n        id: \"interface\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"categories":["ME Network/Network Functions"],"item_ids":["ae2:interface","ae2:cable_interface"],"related":["Possible Upgrades"],"title":"ME Interface"}},"frontMatter":{"categories":["ME Network/Network Functions"],"item_ids":["ae2:interface","ae2:cable_interface"],"related":["Possible Upgrades"],"title":"ME Interface"},"pagePath":"/features/me-network/network-functions/me-interface.md"},"__N_SSG":true}