{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      img: \"img\",\n      a: \"a\"\n    }, _provideComponents(), props.components), {ItemLink, RecipeFor} = _components;\n    if (!ItemLink) _missingMdxReference(\"ItemLink\", true);\n    if (!RecipeFor) _missingMdxReference(\"RecipeFor\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        id: \"item-terminal\",\n        children: \"Item Terminal\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/assets/large/terminal.png\",\n          alt: \"A picture of 3 terminals.\",\n          width: \"863\",\n          height: \"584\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(ItemLink, {\n          id: \"terminal\"\n        }), \" is a HID which gives you access\\nto items stored in your \", _jsx(_components.a, {\n          href: \"/features/me-network/\",\n          children: \"ME Network\"\n        }), \". This will also include\\nitems accessible through \", _jsx(ItemLink, {\n          id: \"storage_bus\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"It has the ability to sort and search, as well as filter by using \", _jsx(ItemLink, {\n          id: \"view_cell\"\n        }), \". It requires a \", _jsx(_components.a, {\n          href: \"/features/me-network/channels/\",\n          children: \"channel\"\n        }), \" to function.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Can be upgraded into a \", _jsx(ItemLink, {\n          id: \"crafting_terminal\"\n        }), \".\"]\n      }), \"\\n\", _jsx(RecipeFor, {\n        id: \"terminal\"\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"item-crafting-terminal\",\n        children: \"Item Crafting Terminal\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/assets/large/crafting_terminal.png\",\n          alt: \"A picture of 3 crafting terminals.\",\n          width: \"1920\",\n          height: \"1057\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(ItemLink, {\n          id: \"crafting_terminal\"\n        }), \" is the upgraded version of the \", _jsx(ItemLink, {\n          id: \"terminal\"\n        }), \" which has an integrated crafting grid with access to\\na \", _jsx(_components.a, {\n          href: \"/features/me-network/\",\n          children: \"ME Network\"\n        }), \"'s Networked Storage.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Like the \", _jsx(ItemLink, {\n          id: \"terminal\"\n        }), \" it also requires a \", _jsx(_components.a, {\n          href: \"/features/me-network/channels/\",\n          children: \"channel\"\n        }), \" to function.\"]\n      }), \"\\n\", _jsx(RecipeFor, {\n        id: \"crafting_terminal\"\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"pattern-access-terminal\",\n        children: \"Pattern Access Terminal\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Gives remote access to all pattern slots for the pattern providers on your network separated\\nby which type of machine they are on. It will show the type of machine in the\\nterminal, however you can name the \", _jsx(ItemLink, {\n          id: \"pattern_provider\"\n        }), \" in the \", _jsx(ItemLink, {\n          id: \"inscriber\"\n        }), \" or an Anvil to alter the name\\ndisplayed in the \", _jsx(ItemLink, {\n          id: \"pattern_access_terminal\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Combined with the fact that you can toggle if the pattern provider shows up at all\\nthis gets you control over your pattern terminal's display.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"You can also choose to pattern providers whose pattern inventory is already full.\"\n      }), \"\\n\", _jsx(RecipeFor, {\n        id: \"pattern_access_terminal\"\n      }), \"\\n\", _jsx(_components.h2, {\n        id: \"pattern-encoding-terminal\",\n        children: \"Pattern Encoding Terminal\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A specialized version of the \", _jsx(ItemLink, {\n          id: \"crafting_terminal\"\n        }), \" designed to\\nencode \", _jsx(ItemLink, {\n          id: \"blank_pattern\"\n        }), \" into \", _jsx(ItemLink, {\n          id: \"crafting_pattern\"\n        }), \"\\nor \", _jsx(ItemLink, {\n          id: \"processing_pattern\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"See \", _jsx(_components.a, {\n          href: \"/features/auto-crafting/\",\n          children: \"auto crafting\"\n        }), \" for more details on automated crafting in general.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Lets you browse the contents of your network like other terminals, but also\\ncontains an area for designing patterns. There are two modes for pattern\\nencoding. Crafting Patterns, and Processing Patterns. Processing patterns are\\ndesigned for use with machines that do not use standard crafting recipes; such\\nas furnaces, or other machines. To select between modes, click the button to\\nthe right of the interface; when it shows a standard crafting table, it will\\ncreate Crafting Patterns, and when it shows a furnace, it will create\\nProcessing Patterns.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"For Crafting Patterns (\\\"Crafts...\\\"), you specify the input crafting materials\\non a standard 3x3 crafting grid, and the output materials are determined\\nautomatically.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"For Processing Patterns (\\\"Creates...\\\"), you specify the input materials and\\noutput materials, including quantity, by placing stacks of items in the\\ninterface. If a processing operation is not guaranteed to succeed (such as\\nsecondary products from some machines), it will not work correctly as a\\nProcessing Pattern.\"\n      }), \"\\n\", _jsx(RecipeFor, {\n        id: \"pattern_encoding_terminal\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"item_ids":["ae2:crafting_terminal","ae2:terminal","ae2:pattern_access_terminal","ae2:pattern_encoding_terminal"],"title":"Terminals"}},"frontMatter":{"item_ids":["ae2:crafting_terminal","ae2:terminal","ae2:pattern_access_terminal","ae2:pattern_encoding_terminal"],"title":"Terminals"},"pagePath":"/features/me-network/terminals.md"},"__N_SSG":true}