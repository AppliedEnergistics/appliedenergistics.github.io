{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {ItemLink, RecipeFor} = _components;\n  if (!ItemLink) _missingMdxReference(\"ItemLink\", true);\n  if (!RecipeFor) _missingMdxReference(\"RecipeFor\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.img, {\n        src: \"/assets/large/emitter2.png\",\n        alt: \"An active Level Emitter\",\n        width: \"577\",\n        height: \"385\"\n      }), \"The \", _jsx(ItemLink, {\n        id: \"level_emitter\"\n      }), \" can indicate either the\\nlevel of a specified item or the \", _jsx(_components.a, {\n        href: \"/features/me-network/\",\n        children: \"ME Network\"\n      }), \" energy\\nlevel. You can set the threshold and if the \", _jsx(ItemLink, {\n        id: \"level_emitter\"\n      }), \" will emit a redstone signal\\nor turn it off.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Does not require a \", _jsx(_components.a, {\n        href: \"/features/me-network/channels/\",\n        children: \"channel\"\n      }), \" to function,\\nif its power is lost the emitter will switch to an off state.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"These can tap into the crafting system when a crafting card is installed,\\nallowing you to output redstone while an item is being crafted, or even\\nconfigure the system to output redstone to preform a crafting task, its\\nimportant to note that you cannot mix level emitter craft via redstone with\\ninterface patterns.\"\n    }), \"\\n\", _jsx(RecipeFor, {\n      id: \"level_emitter\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"categories":["ME Network/Network Functions"],"item_ids":["ae2:level_emitter"],"related":["Possible Upgrades"],"title":"ME Level Emitter"}},"frontMatter":{"categories":["ME Network/Network Functions"],"item_ids":["ae2:level_emitter"],"related":["Possible Upgrades"],"title":"ME Level Emitter"},"pagePath":"/features/me-network/network-functions/me-level-emitter.md"},"__N_SSG":true}