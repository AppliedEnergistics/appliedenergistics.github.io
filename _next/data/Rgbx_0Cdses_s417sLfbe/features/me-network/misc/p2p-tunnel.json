{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {ItemLink, RecipeFor, P2PTunnelTypes} = _components;\n  if (!ItemLink) _missingMdxReference(\"ItemLink\", true);\n  if (!P2PTunnelTypes) _missingMdxReference(\"P2PTunnelTypes\", true);\n  if (!RecipeFor) _missingMdxReference(\"RecipeFor\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"The \", _jsx(ItemLink, {\n        id: \"me_p2p_tunnel\"\n      }), \" or \\\"Point to Point Tunnel\\\" is\\na versatile configurable system to move items / redstone / power / and fluids from\\none location to another though an existing \", _jsx(_components.a, {\n        href: \"/features/me-network/\",\n        children: \"ME Network\"\n      }), \" without\\nstorage.\"]\n    }), \"\\n\", _jsx(RecipeFor, {\n      id: \"me_p2p_tunnel\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Tunnels are 1 input to N outputs. This means you can output to as many points\\nas you want, but only input at a single point per tunnel.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Networks can support any number of tunnels, of any different types, and they\\nall function independently.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"ME Tunnels can be used to carry channels from one location to another, and can\\ncarry up to 32 \", _jsx(_components.a, {\n        href: \"/features/me-network/channels/\",\n        children: \"channels\"\n      }), \", same as a \", _jsx(ItemLink, {\n        id: \"fluix_covered_dense_cable\"\n      }), \", while only\\nrequiring a single channel per point, making tunnels a very powerful tool to\\nexpand \", _jsx(_components.a, {\n        href: \"/features/me-network/\",\n        children: \"me networks\"\n      }), \", especially over a distance.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The channel required by a P2P-Tunnel cannot be carried through another P2P-Tunnel.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To configure a \", _jsx(ItemLink, {\n        id: \"me_p2p_tunnel\"\n      }), \"\\nyou must first attune the tunnel to carry what you want it to (see below), then you need\\nto configure the outputs to their input. You configure the connections by\\nusing the \", _jsx(ItemLink, {\n        id: \"memory_card\"\n      }), \"; First\\nShift+Right Click the input to save it on your memory card, then simply right-click the different outputs to\\nstore the input onto the outputs. this also sets the type of the output to match the type of the input.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"tunnel-types\",\n      children: \"Tunnel Types\"\n    }), \"\\n\", _jsx(P2PTunnelTypes, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"categories":["ME Network/Misc"],"item_ids":["ae2:me_p2p_tunnel"],"title":"P2P Tunnel"}},"frontMatter":{"categories":["ME Network/Misc"],"item_ids":["ae2:me_p2p_tunnel"],"title":"P2P Tunnel"},"pagePath":"/features/me-network/misc/p2p-tunnel.md"},"__N_SSG":true}