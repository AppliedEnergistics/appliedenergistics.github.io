{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {ItemLink, RecipeFor} = _components;\n  if (!ItemLink) _missingMdxReference(\"ItemLink\", true);\n  if (!RecipeFor) _missingMdxReference(\"RecipeFor\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"The \", _jsx(ItemLink, {\n        id: \"storage_bus\"\n      }), \", when attached\\nto another inventory block in the world lets you access that inventory via\\nnetworked functions. This allows you to use chests, barrels, or other types of\\nitem storage in your networks.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The storage via the \", _jsx(ItemLink, {\n        id: \"storage_bus\"\n      }), \"\\nis bi-directional, it can both insert, or extract items from the inventory\\nblock it is attached to as long as the \", _jsx(ItemLink, {\n        id: \"storage_bus\"\n      }), \" has its required\\n\", _jsx(_components.a, {\n        href: \"/features/me-network/channels/\",\n        children: \"channel\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The UI allows you to control which items are selected as storable items, this\\nselection has no effect on what items can be extracted once they are in the\\nstorage.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Storage Bus will function with nearly any inventory block, including\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(ItemLink, {\n        id: \"interface\"\n      }), \", Minefactory Reloaded DSUs, Factorization Barrels,\\nJABBA Barrels, and Better Storage Crates. They can also be used to route items\\npassivly into Buildcraft Pipes.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you place a storage bus on an \", _jsx(ItemLink, {\n        id: \"interface\"\n      }), \" the storage bus will be able to\\ninteract with the full conents of the target network, unless that interface is\\nconfigured to store items inside itself, in which case it will see those\\nstored items.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"_ \", _jsx(_components.strong, {\n        children: \"* Storage Buses ignore input/output sides for DSUs, Barrels, and Digital\\nChests.\"\n      }), \"_\"]\n    }), \"\\n\", _jsx(RecipeFor, {\n      id: \"storage_bus\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"categories":["ME Network/Network Storage"],"item_ids":["ae2:storage_bus"],"related":["Other Networked Storage","Storage Cells","Possible Upgrades"],"title":"ME Storage Bus"}},"frontMatter":{"categories":["ME Network/Network Storage"],"item_ids":["ae2:storage_bus"],"related":["Other Networked Storage","Storage Cells","Possible Upgrades"],"title":"ME Storage Bus"},"pagePath":"/features/me-network/network-storage/me-storage-bus.md"},"__N_SSG":true}