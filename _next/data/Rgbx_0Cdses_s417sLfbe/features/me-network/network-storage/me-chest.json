{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {ItemLink, RecipeFor} = _components;\n  if (!ItemLink) _missingMdxReference(\"ItemLink\", true);\n  if (!RecipeFor) _missingMdxReference(\"RecipeFor\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.img, {\n        src: \"/assets/large/me_chest.png\",\n        alt: \"A picture of an ME Chest\",\n        width: \"530\",\n        height: \"557\"\n      }), \"The \", _jsx(ItemLink, {\n        id: \"chest\"\n      }), \" is the simplest way to use a\\nStorage cell, it will give you direct access to the contents of the cell\\nplaced inside.\"]\n    }), \"\\n\", _jsx(ItemLink, {\n      id: \"chest\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"show their contents and the storage cell status on the front face.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Red - Indicates the Storage Cell is Full.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Orange - Indicates the Storage Cell cannot hold any more types, but it can store more items.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Green - Indicates the cell can hold more types, or more items.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Black - Indicates there is no channel, or power is offline.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(ItemLink, {\n      id: \"chest\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"can be powered stand alone with external power, or as part of a \", _jsx(_components.a, {\n        href: \"/features/me-network/\",\n        children: \"ME\\nNetwork\"\n      }), \". When on a network, the storage of the\\nchest will be available to any other devices in the same network using an\\nassigned Channel. When used without a network, the chest will not transfer\\nfull stacks at once, capping transfers at 38 items instead.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(ItemLink, {\n        id: \"chest\"\n      }), \" consumes 1 AE/t, and\\nconsumes a small amount based on which storage cell is installed. If powered\\non its own it has a very small internal storage which only lasts a few\\nmoments, using a \", _jsx(ItemLink, {\n        id: \"energy_cell\"\n      }), \" or\\nusing a battery from another mod is suggested for reliable operation.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(ItemLink, {\n        id: \"chest\"\n      }), \" has two UI's, one is\\nused to place the storage cell inside the device from the sides or bottom, the\\nother is accessed by using the top surface to access the contents.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Items can be injected into the \", _jsx(ItemLink, {\n        id: \"chest\"\n      }), \" like any other inventory, however\\nitems cannot be extracted with automation except via networked functions like\\nthe \", _jsx(ItemLink, {\n        id: \"export_bus\"\n      }), \".\"]\n    }), \"\\n\", _jsx(RecipeFor, {\n      id: \"chest\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"categories":["ME Network/Network Storage"],"item_ids":["ae2:chest"],"related":["Other Networked Storage","Storage Cells"],"title":"ME Chest"}},"frontMatter":{"categories":["ME Network/Network Storage"],"item_ids":["ae2:chest"],"related":["Other Networked Storage","Storage Cells"],"title":"ME Chest"},"pagePath":"/features/me-network/network-storage/me-chest.md"},"__N_SSG":true}