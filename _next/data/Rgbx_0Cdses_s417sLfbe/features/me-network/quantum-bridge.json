{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    em: \"em\",\n    h2: \"h2\",\n    br: \"br\",\n    strong: \"strong\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {ItemLink, RecipeFor} = _components;\n  if (!ItemLink) _missingMdxReference(\"ItemLink\", true);\n  if (!RecipeFor) _missingMdxReference(\"RecipeFor\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/large/qnb.png\",\n        alt: \"A formed Quantum Network Bridge\",\n        width: \"512\",\n        height: \"512\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.em, {\n        children: \"Quantum Network Bridges\"\n      }), \" can connect two networks over infinite distances and even between dimensions.\\nThey can carry 32 channels in total (regardless of how cables are connected to each face).\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"quantum-ring\",\n      children: \"Quantum Ring\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Eight of these blocks placed around a \", _jsx(ItemLink, {\n        id: \"quantum_link\"\n      }), \" will create a\\n\", _jsx(_components.em, {\n        children: \"Quantum Network Bridge\"\n      }), \". Only the 4 \", _jsx(ItemLink, {\n        id: \"quantum_ring\"\n      }), \" blocks adjacent to\\nthe \", _jsx(ItemLink, {\n        id: \"quantum_link\"\n      }), \" will accept network connections,\\nthe 4 corner blocks cannot connect to cables.\"]\n    }), \"\\n\", _jsx(RecipeFor, {\n      id: \"quantum_ring\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"quantum-link-chamber\",\n      children: \"Quantum Link Chamber\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"One of these blocks surrounded by a \", _jsx(ItemLink, {\n        id: \"quantum_ring\"\n      }), \"\\nwill create a \", _jsx(_components.em, {\n        children: \"Quantum Network Bridge\"\n      }), \". This block doesn't connect to any cables and only registers\\nas part of the network with the full bridge is made.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This blocks inventory can only hold a single \", _jsx(ItemLink, {\n        id: \"quantum_entangled_singularity\"\n      }), \" and is\\nautomation accessible.\"]\n    }), \"\\n\", _jsx(RecipeFor, {\n      id: \"quantum_link\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"quantum-entangled-singularity\",\n      children: \"Quantum Entangled Singularity\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Required to create a connection between to \", _jsx(_components.em, {\n        children: \"Quantum Network Bridges\"\n      }), \", they are always produced in matching\\npairs, to create a connection place 1 of the pair of \", _jsx(ItemLink, {\n        id: \"quantum_entangled_singularity\"\n      }), \" into the \", _jsx(ItemLink, {\n        id: \"quantum_link\"\n      }), \" of\\nthe bridge on each side.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"They are crafted by causing a reaction between \", _jsx(ItemLink, {\n        id: \"minecraft:ender_pearl\"\n      }), \" or \", _jsx(ItemLink, {\n        id: \"ender_dust\"\n      }), _jsx(_components.br, {}), \"\\n\", \"and a \", _jsx(ItemLink, {\n        id: \"singularity\"\n      }), \". Any explosive force should be enough to trigger the reaction.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.em, {\n          children: \"Nearly any explosion - even creepers - will work.\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Always produced in pairs, but only require a single \", _jsx(ItemLink, {\n        id: \"singularity\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It might be a good idea to label these with names when you create them using the vanilla anvil.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"note-for-anti-griefing-servers\",\n      children: \"Note for Anti Griefing Servers\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"AE also includes a block called \", _jsx(ItemLink, {\n        id: \"tiny_tnt\"\n      }), \", this is a small craftable TNT\\nwhich can have its block damage disabled, but can still hurt a little, and\\ncan be used as an alternative to vanilla tnt / other explosions even when\\nblock damage is disabled.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Quantum Bridge","sidenav_icon":"ae2:singularity","item_ids":["ae2:quantum_link","ae2:quantum_ring","ae2:quantum_entangled_singularity"]}},"frontMatter":{"title":"Quantum Bridge","sidenav_icon":"ae2:singularity","item_ids":["ae2:quantum_link","ae2:quantum_ring","ae2:quantum_entangled_singularity"]},"pagePath":"/features/me-network/quantum-bridge.md"},"__N_SSG":true}