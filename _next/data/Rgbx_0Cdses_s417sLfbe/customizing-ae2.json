{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    h3: \"h3\",\n    a: \"a\",\n    code: \"code\",\n    h4: \"h4\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h5: \"h5\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {ItemLink} = _components;\n  if (!ItemLink) _missingMdxReference(\"ItemLink\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"This page describes how AE2 can be tweaked by modpack authors or players to their own play-style.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"configuration\",\n      children: \"Configuration\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"channel-modes\",\n      children: \"Channel Modes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you don't like playing with channels or just want a more laid back experience, see the\\n\", _jsx(_components.a, {\n        href: \"/features/me-network/channels/#channel-modes\",\n        children: \"channel modes section\"\n      }), \" for multiple options\\nto customize AE2's channels mechanic.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"faster-crystal-growth-in-certain-fluids\",\n      children: \"Faster Crystal Growth in Certain Fluids\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"AE2 allows a fluid tag to be specified in \", _jsx(_components.code, {\n        children: \"improvedFluidTag\"\n      }), \", which will increase the speed at which crystal seeds\\ngrow by \", _jsx(_components.code, {\n        children: \"improvedFluidMultiplier\"\n      }), \" (default: 2) when they are submerged in this type of fluid.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"recipes\",\n      children: \"Recipes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"AE2 uses standard JSON recipes. The easiest starting point is to download the jar file and unpack it. Recipes are\\nin \", _jsx(_components.code, {\n        children: \"data/ae2/recipes\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"special-recipe-types\",\n      children: \"Special Recipe Types\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"AE2 introduces a few custom recipe types that use a custom JSON format. They are described in the following sections.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"inscriber\",\n      children: \"Inscriber\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Used by the \", _jsx(ItemLink, {\n        id: \"inscriber\"\n      }), \". Example recipes can be found in \", _jsx(_components.code, {\n        children: \"data/ae2/recipes/inscriber\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Please note that the inscriber will also allow each recipe to be flipped so that top and bottom slots are reversed, so\\ntwo recipes whose top/bottom are the same after flipping would result in a recipe conflict.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The available JSON properties are as follows:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"type\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Must be \", _jsx(_components.code, {\n              children: \"ae2:inscriber\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"mode\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Defines whether the top and bottom ingredients are consumed (\", _jsx(_components.code, {\n              children: \"press\"\n            }), \") or not (\", _jsx(_components.code, {\n              children: \"inscribe\"\n            }), \")\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"ingredients\"\n            }), \".\", _jsx(_components.code, {\n              children: \"top\"\n            })]\n          }), _jsx(_components.td, {\n            children: \"Ingredient for the top slot (optional).\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"ingredients\"\n            }), \".\", _jsx(_components.code, {\n              children: \"middle\"\n            })]\n          }), _jsx(_components.td, {\n            children: \"Ingredient for the middle slot (required).\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"ingredients\"\n            }), \".\", _jsx(_components.code, {\n              children: \"bottom\"\n            })]\n          }), _jsx(_components.td, {\n            children: \"Ingredient for the bottom slot (optional).\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"result\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Recipe result\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"entropy-manipulator\",\n      children: \"Entropy Manipulator\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(ItemLink, {\n        id: \"entropy_manipulator\"\n      }), \" uses recipes to decide what it can be used on.\\nExample recipes can be found in \", _jsx(_components.code, {\n        children: \"data/ae2/recipes/entropy\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Right-clicking with the entry manipulator uses recipes of type \", _jsx(_components.code, {\n        children: \"heat\"\n      }), \", while shift-right-clicking will use \", _jsx(_components.code, {\n        children: \"cool\"\n      }), \".\\nPlacing an entropy manipulator in a dispenser will try both types (first \", _jsx(_components.code, {\n        children: \"cool\"\n      }), \", then \", _jsx(_components.code, {\n        children: \"heat\"\n      }), \").\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The available JSON properties are as follows:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"type\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Must be \", _jsx(_components.code, {\n              children: \"ae2:entropy\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"mode\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The use-mode of the entropy manipulator this recipe applies to (\", _jsx(_components.code, {\n              children: \"heat\"\n            }), \" or \", _jsx(_components.code, {\n              children: \"cool\"\n            }), \").\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"input\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Which in-world block/fluid this recipe applies to.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"input\"\n            }), \".\", _jsx(_components.code, {\n              children: \"block\"\n            })]\n          }), _jsx(_components.td, {\n            children: \"Defines which blocks this recipe applies to (see below for details).\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"input\"\n            }), \".\", _jsx(_components.code, {\n              children: \"fluid\"\n            })]\n          }), _jsx(_components.td, {\n            children: \"Defines which fluids this recipe applies to (see below for details).\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"output\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Defines the result of using the item on \", _jsx(_components.code, {\n              children: \"input\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h5, {\n      id: \"defining-inputs\",\n      children: \"Defining Inputs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The input for the entropy recipe type can be a block or fluid, or both at the same time, to match only\\nspecific waterlogged blocks.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Block and fluid inputs can be defined as follows:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"{\\n  \\\"input\\\": {\\n    \\\"block\\\": {\\n      \\\"id\\\": \\\"minecraft:cobblestone\\\",\\n      \\\"property1\\\": \\\"value\\\",\\n      \\\"property2\\\": [\\\"value1\\\", \\\"value2\\\"],\\n      \\\"property3\\\": {\\n        \\\"min\\\": 1,\\n        \\\"max\\\": 5\\n      }\\n    },\\n    \\\"fluid\\\": {\\n      \\\"id\\\": \\\"minecraft:water\\\",\\n      \\\"property1\\\": \\\"value\\\",\\n      \\\"property2\\\": [\\\"value1\\\", \\\"value2\\\"],\\n      \\\"property3\\\": {\\n        \\\"min\\\": 1,\\n        \\\"max\\\": 5\\n      }\\n    }\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" property is mandatory, while additional properties may be specified to match specific block state properties,\\neither directly, as a list of matching values, or as a range (between \", _jsx(_components.code, {\n        children: \"min\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"max\"\n      }), \").\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      id: \"defining-output\",\n      children: \"Defining Output\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Applying an entropy manipulator recipe can result in one or all of:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Changing the block\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Changing the fluid\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Dropping items\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"{\\n  \\\"output\\\": {\\n    \\\"block\\\": {\\n      \\\"id\\\": \\\"minecraft:cobblestone\\\",\\n      \\\"keep\\\": true,\\n      \\\"property1\\\": \\\"value\\\"\\n    },\\n    \\\"fluid\\\": {\\n      \\\"id\\\": \\\"minecraft:water\\\",\\n      \\\"property2\\\": \\\"value\\\"\\n    },\\n    \\\"drops\\\": [\\n      {\\n        \\\"item\\\": \\\"minecraft:snowball\\\",\\n        \\\"count\\\": 1\\n      }\\n    ]\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All three properties (block, fluid, drops) are optional, but can also be used together.\\nThe special \", _jsx(_components.code, {\n        children: \"keep\"\n      }), \" property for \", _jsx(_components.code, {\n        children: \"block\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"fluid\"\n      }), \" will copy over the block state properties from the existing\\nblock while changing the block or fluid \", _jsx(_components.code, {\n        children: \"id\"\n      }), \". Additionally, any extra properties will be interpreted as block state\\nproperties and applied to the new block.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If the operation should drop items, those should be specified as a list in \", _jsx(_components.code, {\n        children: \"drops\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"matter-cannon-ammo\",\n      children: \"Matter Cannon Ammo\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(ItemLink, {\n        id: \"matter_cannon\"\n      }), \" uses recipes to decide which items count as ammo, and what their damage value should\\nbe. Example recipes can be found in \", _jsx(_components.code, {\n        children: \"data/ae2/recipes/matter_cannon\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"type\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Must be \", _jsx(_components.code, {\n              children: \"ae2:matter_cannon\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"ammo\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Ingredient identifying which item this recipe applies to.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"weight\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The weight of the ammo. This affects block penetration and damage. Damage is weight divided by 20, rounded up.\"\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{"title":"Customizing AE2","sidenav_icon":"certus_quartz_wrench"}},"frontMatter":{"title":"Customizing AE2","sidenav_icon":"certus_quartz_wrench"},"pagePath":"/customizing-ae2.md"},"__N_SSG":true}